// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"context"
	"fmt"
	"time"

	"cloud.google.com/go/spanner"
	"github.com/s-you/yo-templates/internal/util"
)

type H = map[string]interface{}

// User represents a row from 'users'.
type User struct {
	UserID    string    `spanner:"user_id" json:"userID"`       // user_id
	Name      string    `spanner:"name" json:"name"`            // name
	Status    int64     `spanner:"status" json:"status"`        // status
	CreatedAt time.Time `spanner:"created_at" json:"createdAt"` // created_at
	UpdatedAt time.Time `spanner:"updated_at" json:"updatedAt"` // updated_at
}

func (u *User) SetIdentity() (err error) {
	if u.UserID == "" {
		u.UserID, err = util.NewUUID()
	}
	return nil
}

func UserPrimaryKeys() []string {
	return []string{
		"user_id",
	}
}

func UserColumns() []string {
	return []string{
		"user_id",
		"name",
		"status",
		"created_at",
		"updated_at",
	}
}

func (u *User) ColumnsToPtrs(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "user_id":
			ret = append(ret, &u.UserID)
		case "name":
			ret = append(ret, &u.Name)
		case "status":
			ret = append(ret, &u.Status)
		case "created_at":
			ret = append(ret, &u.CreatedAt)
		case "updated_at":
			ret = append(ret, &u.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (u *User) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "user_id":
			ret = append(ret, u.UserID)
		case "name":
			ret = append(ret, u.Name)
		case "status":
			ret = append(ret, u.Status)
		case "created_at":
			ret = append(ret, u.CreatedAt)
		case "updated_at":
			ret = append(ret, u.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (u *User) Insert(ctx context.Context) *spanner.Mutation {
	u.CreatedAt = time.Now()
	u.UpdatedAt = time.Now()
	return spanner.Insert("users", UserColumns(), []interface{}{
		u.UserID, u.Name, u.Status, u.CreatedAt, u.UpdatedAt,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (u *User) Update(ctx context.Context) *spanner.Mutation {
	u.UpdatedAt = time.Now()
	return spanner.Update("users", UserColumns(), []interface{}{
		u.UserID, u.Name, u.Status, u.CreatedAt, u.UpdatedAt,
	})
}

// UpdateMap returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (u *User) UpdateMap(ctx context.Context, userMap map[string]interface{}) *spanner.Mutation {
	userMap["updated_at"] = time.Now()
	// add primary keys to columns to update by primary keys
	userMap["user_id"] = u.UserID
	return spanner.UpdateMap("users", userMap)
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (u *User) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	if u.CreatedAt.IsZero() {
		u.CreatedAt = time.Now()
	}
	u.UpdatedAt = time.Now()
	return spanner.InsertOrUpdate("users", UserColumns(), []interface{}{
		u.UserID, u.Name, u.Status, u.CreatedAt, u.UpdatedAt,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (u *User) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	u.UpdatedAt = time.Now()
	cols = append(cols, "updated_at")
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, UserPrimaryKeys()...)

	values, err := u.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, fmt.Errorf("invalid argument: User.UpdateColumns users: %w", err)
	}

	return spanner.Update("users", colsWithPKeys, values), nil
}

// Delete deletes the User from the database.
func (u *User) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := u.columnsToValues(UserPrimaryKeys())
	return spanner.Delete("users", spanner.Key(values))
}
