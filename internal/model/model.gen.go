// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"fmt"
)

type H = map[string]interface{}

func GroupPrimaryKeys() []string {
	return []string{
		"group_id",
	}
}

func GroupColumns() []string {
	return []string{
		"group_id",
		"name",
		"created_at",
		"updated_at",
	}
}

func GroupColumnsByIndexName(index string) []string {
	return nil
}

func (g *Group) ColumnsToPtrs(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "group_id":
			ret = append(ret, &g.GroupID)
		case "name":
			ret = append(ret, &g.Name)
		case "created_at":
			ret = append(ret, &g.CreatedAt)
		case "updated_at":
			ret = append(ret, &g.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (g *Group) Ptrs() []interface{} {
	return []interface{}{
		&g.GroupID,
		&g.Name,
		&g.CreatedAt,
		&g.UpdatedAt,
	}
}

func (g *Group) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "group_id":
			ret = append(ret, g.GroupID)
		case "name":
			ret = append(ret, g.Name)
		case "created_at":
			ret = append(ret, g.CreatedAt)
		case "updated_at":
			ret = append(ret, g.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

func UserPrimaryKeys() []string {
	return []string{
		"user_id",
	}
}

func UserColumns() []string {
	return []string{
		"user_id",
		"name",
		"status",
		"created_at",
		"updated_at",
	}
}

func UserColumnsByIndexName(index string) []string {
	switch index {
	case "idx_users_name":
		return idx_users_name_cols
	case "idx_users_name_status":
		return idx_users_name_status_cols
	}
	return nil
}

func (u *User) ColumnsToPtrs(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "user_id":
			ret = append(ret, &u.UserID)
		case "name":
			ret = append(ret, &u.Name)
		case "status":
			ret = append(ret, &u.Status)
		case "created_at":
			ret = append(ret, &u.CreatedAt)
		case "updated_at":
			ret = append(ret, &u.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (u *User) Ptrs() []interface{} {
	return []interface{}{
		&u.UserID,
		&u.Name,
		&u.Status,
		&u.CreatedAt,
		&u.UpdatedAt,
	}
}

func (u *User) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "user_id":
			ret = append(ret, u.UserID)
		case "name":
			ret = append(ret, u.Name)
		case "status":
			ret = append(ret, u.Status)
		case "created_at":
			ret = append(ret, u.CreatedAt)
		case "updated_at":
			ret = append(ret, u.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

func UserGroupPrimaryKeys() []string {
	return []string{
		"group_id",
		"user_id",
	}
}

func UserGroupColumns() []string {
	return []string{
		"group_id",
		"user_id",
		"created_at",
		"updated_at",
	}
}

func UserGroupColumnsByIndexName(index string) []string {
	switch index {
	case "idx_group_users_group_id":
		return idx_group_users_group_id_cols
	case "idx_group_users_user_id":
		return idx_group_users_user_id_cols
	}
	return nil
}

func (ug *UserGroup) ColumnsToPtrs(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "group_id":
			ret = append(ret, &ug.GroupID)
		case "user_id":
			ret = append(ret, &ug.UserID)
		case "created_at":
			ret = append(ret, &ug.CreatedAt)
		case "updated_at":
			ret = append(ret, &ug.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (ug *UserGroup) Ptrs() []interface{} {
	return []interface{}{
		&ug.GroupID,
		&ug.UserID,
		&ug.CreatedAt,
		&ug.UpdatedAt,
	}
}

func (ug *UserGroup) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "group_id":
			ret = append(ret, ug.GroupID)
		case "user_id":
			ret = append(ret, ug.UserID)
		case "created_at":
			ret = append(ret, ug.CreatedAt)
		case "updated_at":
			ret = append(ret, ug.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

var idx_users_name_cols = []string{
	"user_id", "name", "created_at",
}
var idx_users_name_status_cols = []string{
	"user_id", "name", "status",
}
var idx_group_users_group_id_cols = []string{
	"group_id", "user_id", "group_id",
}
var idx_group_users_user_id_cols = []string{
	"group_id", "user_id", "user_id",
}
