// Code generated by yo. DO NOT EDIT.
// Package model contains the types.
package model

import (
	"fmt"
	"time"

	"github.com/s-you/yo-templates/internal/util"
)

type H = map[string]interface{}

// Group represents a row from 'groups'.
type Group struct {
	GroupID   string    `spanner:"group_id" json:"groupID"`
	Name      string    `spanner:"name" json:"name"`
	CreatedAt time.Time `spanner:"created_at" json:"createdAt"`
	UpdatedAt time.Time `spanner:"updated_at" json:"updatedAt"`
}

func (g *Group) SetIdentity() (err error) {
	if g.GroupID == "" {
		g.GroupID, err = util.NewUUID()
	}
	return nil
}

func GroupPrimaryKeys() []string {
	return []string{
		"group_id",
	}
}

func GroupColumns() []string {
	return []string{
		"group_id",
		"name",
		"created_at",
		"updated_at",
	}
}

func (g *Group) ColumnsToPtrs(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "group_id":
			ret = append(ret, &g.GroupID)
		case "name":
			ret = append(ret, &g.Name)
		case "created_at":
			ret = append(ret, &g.CreatedAt)
		case "updated_at":
			ret = append(ret, &g.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (g *Group) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "group_id":
			ret = append(ret, g.GroupID)
		case "name":
			ret = append(ret, g.Name)
		case "created_at":
			ret = append(ret, g.CreatedAt)
		case "updated_at":
			ret = append(ret, g.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// User represents a row from 'users'.
type User struct {
	UserID    string    `spanner:"user_id" json:"userID"`
	Name      string    `spanner:"name" json:"name"`
	Status    int64     `spanner:"status" json:"status"`
	CreatedAt time.Time `spanner:"created_at" json:"createdAt"`
	UpdatedAt time.Time `spanner:"updated_at" json:"updatedAt"`
}

func (u *User) SetIdentity() (err error) {
	if u.UserID == "" {
		u.UserID, err = util.NewUUID()
	}
	return nil
}

func UserPrimaryKeys() []string {
	return []string{
		"user_id",
	}
}

func UserColumns() []string {
	return []string{
		"user_id",
		"name",
		"status",
		"created_at",
		"updated_at",
	}
}

func (u *User) ColumnsToPtrs(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "user_id":
			ret = append(ret, &u.UserID)
		case "name":
			ret = append(ret, &u.Name)
		case "status":
			ret = append(ret, &u.Status)
		case "created_at":
			ret = append(ret, &u.CreatedAt)
		case "updated_at":
			ret = append(ret, &u.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (u *User) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "user_id":
			ret = append(ret, u.UserID)
		case "name":
			ret = append(ret, u.Name)
		case "status":
			ret = append(ret, u.Status)
		case "created_at":
			ret = append(ret, u.CreatedAt)
		case "updated_at":
			ret = append(ret, u.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// UserGroup represents a row from 'user_groups'.
type UserGroup struct {
	GroupID   string    `spanner:"group_id" json:"groupID"`
	UserID    string    `spanner:"user_id" json:"userID"`
	CreatedAt time.Time `spanner:"created_at" json:"createdAt"`
	UpdatedAt time.Time `spanner:"updated_at" json:"updatedAt"`
}

func (ug *UserGroup) SetIdentity() (err error) {
	return nil
}

func UserGroupPrimaryKeys() []string {
	return []string{
		"group_id",
		"user_id",
	}
}

func UserGroupColumns() []string {
	return []string{
		"group_id",
		"user_id",
		"created_at",
		"updated_at",
	}
}

func (ug *UserGroup) ColumnsToPtrs(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "group_id":
			ret = append(ret, &ug.GroupID)
		case "user_id":
			ret = append(ret, &ug.UserID)
		case "created_at":
			ret = append(ret, &ug.CreatedAt)
		case "updated_at":
			ret = append(ret, &ug.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (ug *UserGroup) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "group_id":
			ret = append(ret, ug.GroupID)
		case "user_id":
			ret = append(ret, ug.UserID)
		case "created_at":
			ret = append(ret, ug.CreatedAt)
		case "updated_at":
			ret = append(ret, ug.UpdatedAt)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}
