// Code generated by yo. DO NOT EDIT.
package repository

import (
	"bytes"
	"context"
	"encoding/binary"
	"encoding/gob"

	"cloud.google.com/go/spanner"

	"github.com/cespare/xxhash"
	"github.com/s-you/yo-templates/internal/model"
	"github.com/s-you/yo-templates/internal/pkg/cache"
)

func getCacheKey(stmt spanner.Statement) (string, error) {
	sum64 := xxhash.Sum64String(stmt.SQL)
	buf := new(bytes.Buffer)
	cacheKey := make([]byte, 8)
	binary.LittleEndian.PutUint64(cacheKey, sum64)
	buf.Write(cacheKey)
	e := gob.NewEncoder(buf)
	err := e.Encode(stmt.Params)
	if err != nil {
		return "", err
	}
	return buf.String(), nil
}

func (b *groupBuilder) QueryCachedInto(ctx context.Context, into **model.Group) error {
	stmt := b.b.GetSelectStatement()
	cacheKey, err := getCacheKey(stmt)
	if err != nil {
		return err
	}

	cached := cache.Default
	if v, ok := cached.Get(cacheKey); ok {
		if *into, ok = v.(*model.Group); ok {
			return nil
		}
	}
	iter := b.client.Single().Query(ctx, stmt)
	it := &groupIterator{iter, b.b.Columns()}
	err = it.Into(*into)
	if err != nil {
		return err
	}
	cached.Set(cacheKey, *into)

	return nil
}

func (b *groupBuilder) QueryCachedIntos(ctx context.Context, into *[]*model.Group) error {
	stmt := b.b.GetSelectStatement()
	cacheKey, err := getCacheKey(stmt)
	if err != nil {
		return err
	}

	cached := cache.Default
	if v, ok := cached.Get(cacheKey); ok {
		if *into, ok = v.([]*model.Group); ok {
			return nil
		}
	}
	iter := b.client.Single().Query(ctx, stmt)
	it := &groupIterator{iter, b.b.Columns()}
	err = it.Intos(into)
	if err != nil {
		return err
	}
	cached.Set(cacheKey, *into)

	return nil
}

func (b *userBuilder) QueryCachedInto(ctx context.Context, into **model.User) error {
	stmt := b.b.GetSelectStatement()
	cacheKey, err := getCacheKey(stmt)
	if err != nil {
		return err
	}

	cached := cache.Default
	if v, ok := cached.Get(cacheKey); ok {
		if *into, ok = v.(*model.User); ok {
			return nil
		}
	}
	iter := b.client.Single().Query(ctx, stmt)
	it := &userIterator{iter, b.b.Columns()}
	err = it.Into(*into)
	if err != nil {
		return err
	}
	cached.Set(cacheKey, *into)

	return nil
}

func (b *userBuilder) QueryCachedIntos(ctx context.Context, into *[]*model.User) error {
	stmt := b.b.GetSelectStatement()
	cacheKey, err := getCacheKey(stmt)
	if err != nil {
		return err
	}

	cached := cache.Default
	if v, ok := cached.Get(cacheKey); ok {
		if *into, ok = v.([]*model.User); ok {
			return nil
		}
	}
	iter := b.client.Single().Query(ctx, stmt)
	it := &userIterator{iter, b.b.Columns()}
	err = it.Intos(into)
	if err != nil {
		return err
	}
	cached.Set(cacheKey, *into)

	return nil
}

func (b *userGroupBuilder) QueryCachedInto(ctx context.Context, into **model.UserGroup) error {
	stmt := b.b.GetSelectStatement()
	cacheKey, err := getCacheKey(stmt)
	if err != nil {
		return err
	}

	cached := cache.Default
	if v, ok := cached.Get(cacheKey); ok {
		if *into, ok = v.(*model.UserGroup); ok {
			return nil
		}
	}
	iter := b.client.Single().Query(ctx, stmt)
	it := &userGroupIterator{iter, b.b.Columns()}
	err = it.Into(*into)
	if err != nil {
		return err
	}
	cached.Set(cacheKey, *into)

	return nil
}

func (b *userGroupBuilder) QueryCachedIntos(ctx context.Context, into *[]*model.UserGroup) error {
	stmt := b.b.GetSelectStatement()
	cacheKey, err := getCacheKey(stmt)
	if err != nil {
		return err
	}

	cached := cache.Default
	if v, ok := cached.Get(cacheKey); ok {
		if *into, ok = v.([]*model.UserGroup); ok {
			return nil
		}
	}
	iter := b.client.Single().Query(ctx, stmt)
	it := &userGroupIterator{iter, b.b.Columns()}
	err = it.Intos(into)
	if err != nil {
		return err
	}
	cached.Set(cacheKey, *into)

	return nil
}
