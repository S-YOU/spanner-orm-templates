// Code generated by yo. DO NOT EDIT.
package repository

import (
	"context"

	"github.com/s-you/yo-templates/internal/model"
)

type GroupRepositoryIndexesCached interface {
	GetGroupByGroupIDCached(ctx context.Context, groupID string) (*model.Group, error)
	FindGroupsByGroupIDsCached(ctx context.Context, groupIDs []string) ([]*model.Group, error)
}

// GetGroupByGroupIDCached retrieves a row from cache or 'groups' as a Group.
// Generated from primary key
func (g groupRepository) GetGroupByGroupIDCached(ctx context.Context, groupID string) (*model.Group, error) {
	group := &model.Group{}
	if err := g.Builder().
		Where("group_id = @param0", Params{"param0": groupID}).
		QueryCachedInto(ctx, &group); err != nil {
		return nil, err
	}

	return group, nil
}

// FindGroupsByGroupIDsCached retrieves multiple rows from 'groups' or cache as []*model.Group.
// Generated from primary key
func (g groupRepository) FindGroupsByGroupIDsCached(ctx context.Context, groupIDs []string) ([]*model.Group, error) {
	var items []*model.Group
	if err := g.Builder().Where("group_id IN UNNEST(@arg0)", Params{"arg0": groupIDs}).
		QueryCachedIntos(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

type UserRepositoryIndexesCached interface {
	GetUserByUserIDCached(ctx context.Context, userID string) (*model.User, error)
	FindUsersByUserIDsCached(ctx context.Context, userIDs []string) ([]*model.User, error)
	FindUsersByNameCached(ctx context.Context, name string) ([]*model.User, error)
	FindUsersByNamesCached(ctx context.Context, ids []string) ([]*model.User, error)
}

// GetUserByUserIDCached retrieves a row from cache or 'users' as a User.
// Generated from primary key
func (u userRepository) GetUserByUserIDCached(ctx context.Context, userID string) (*model.User, error) {
	user := &model.User{}
	if err := u.Builder().
		Where("user_id = @param0", Params{"param0": userID}).
		QueryCachedInto(ctx, &user); err != nil {
		return nil, err
	}

	return user, nil
}

// FindUsersByUserIDsCached retrieves multiple rows from 'users' or cache as []*model.User.
// Generated from primary key
func (u userRepository) FindUsersByUserIDsCached(ctx context.Context, userIDs []string) ([]*model.User, error) {
	var items []*model.User
	if err := u.Builder().Where("user_id IN UNNEST(@arg0)", Params{"arg0": userIDs}).
		QueryCachedIntos(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

type UserGroupRepositoryIndexesCached interface {
	GetUserGroupByGroupIDAndUserIDCached(ctx context.Context, groupID string, userID string) (*model.UserGroup, error)
	FindUserGroupsByGroupIDsAndUserIDsCached(ctx context.Context, groupIDs []string, userIDs []string) ([]*model.UserGroup, error)
	FindUserGroupsByUserIDCached(ctx context.Context, userID string) ([]*model.UserGroup, error)
	FindUserGroupsByUserIDsCached(ctx context.Context, ids []string) ([]*model.UserGroup, error)
}

// GetUserGroupByGroupIDAndUserIDCached retrieves a row from cache or 'user_groups' as a UserGroup.
// Generated from primary key
func (ug userGroupRepository) GetUserGroupByGroupIDAndUserIDCached(ctx context.Context, groupID string, userID string) (*model.UserGroup, error) {
	userGroup := &model.UserGroup{}
	if err := ug.Builder().
		Where("group_id = @param0 AND user_id = @param1", Params{"param0": groupID, "param1": userID}).
		QueryCachedInto(ctx, &userGroup); err != nil {
		return nil, err
	}

	return userGroup, nil
}

// FindUserGroupsByGroupIDsAndUserIDsCached retrieves multiple rows from 'user_groups' or cache as []*model.UserGroup.
// Generated from primary key
func (ug userGroupRepository) FindUserGroupsByGroupIDsAndUserIDsCached(ctx context.Context, groupIDs []string, userIDs []string) ([]*model.UserGroup, error) {
	var items []*model.UserGroup
	if err := ug.Builder().Where("group_id IN UNNEST(@arg0) AND user_id IN UNNEST(@arg1)", Params{"arg0": groupIDs, "arg1": userIDs}).
		QueryCachedIntos(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// GetUsersByNameCached retrieves multiple rows from cache or 'users' as a slice of User.
// Generated from index 'idx_users_name'.
func (u userRepository) FindUsersByNameCached(ctx context.Context, name string) ([]*model.User, error) {
	user := []*model.User{}
	if err := u.Builder().
		Where("name = @param0", Params{"param0": name}).
		QueryCachedIntos(ctx, &user); err != nil {
		return nil, err
	}

	return user, nil
}

// FindUsersByNamesCached retrieves multiple rows from 'users' or from cache as []*model.User.
// Generated from unique index 'idx_users_name'.
func (u userRepository) FindUsersByNamesCached(ctx context.Context, ids []string) ([]*model.User, error) {
	var items []*model.User
	if err := u.Builder().Where("name IN UNNEST(?)", ids).QueryCachedIntos(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}

// GetUserGroupsByUserIDCached retrieves multiple rows from cache or 'user_groups' as a slice of UserGroup.
// Generated from index 'idx_group_users_user_id'.
func (ug userGroupRepository) FindUserGroupsByUserIDCached(ctx context.Context, userID string) ([]*model.UserGroup, error) {
	userGroup := []*model.UserGroup{}
	if err := ug.Builder().
		Where("user_id = @param0", Params{"param0": userID}).
		QueryCachedIntos(ctx, &userGroup); err != nil {
		return nil, err
	}

	return userGroup, nil
}

// FindUserGroupsByUserIDsCached retrieves multiple rows from 'user_groups' or from cache as []*model.UserGroup.
// Generated from unique index 'idx_group_users_user_id'.
func (ug userGroupRepository) FindUserGroupsByUserIDsCached(ctx context.Context, ids []string) ([]*model.UserGroup, error) {
	var items []*model.UserGroup
	if err := ug.Builder().Where("user_id IN UNNEST(?)", ids).QueryCachedIntos(ctx, &items); err != nil {
		return nil, err
	}

	return items, nil
}
