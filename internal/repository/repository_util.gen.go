// Code generated by yo. DO NOT EDIT.
package repository

import (
	"github.com/s-you/yo-templates/internal/model"
)

type GroupRepositoryUtil interface {
	GroupIDs(in []*model.Group) []string
	GroupIDToGroupMap(in []*model.Group) map[string]*model.Group
}

func (g groupRepository) GroupIDs(in []*model.Group) []string {
	items := make([]string, len(in))
	for i, x := range in {
		items[i] = x.GroupID
	}
	return items
}

func (g groupRepository) GroupIDToGroupMap(in []*model.Group) map[string]*model.Group {
	itemMap := make(map[string]*model.Group)
	for _, x := range in {
		itemMap[x.GroupID] = x
	}
	return itemMap
}

type UserRepositoryUtil interface {
	UserIDs(in []*model.User) []string
	UserIDToUserMap(in []*model.User) map[string]*model.User
	Names(in []*model.User) []string
	NameToUsersMap(in []*model.User) map[string][]*model.User
	Statuses(in []*model.User) []int64
	StatusToUsersMap(in []*model.User) map[int64][]*model.User
}

func (u userRepository) UserIDs(in []*model.User) []string {
	items := make([]string, len(in))
	for i, x := range in {
		items[i] = x.UserID
	}
	return items
}

func (u userRepository) UserIDToUserMap(in []*model.User) map[string]*model.User {
	itemMap := make(map[string]*model.User)
	for _, x := range in {
		itemMap[x.UserID] = x
	}
	return itemMap
}

func (u userRepository) Names(in []*model.User) []string {
	items := make([]string, len(in))
	for i, x := range in {
		items[i] = x.Name
	}
	return items
}

func (u userRepository) NameToUsersMap(in []*model.User) map[string][]*model.User {
	itemMap := make(map[string][]*model.User)
	for _, x := range in {
		if _, ok := itemMap[x.Name]; !ok {
			itemMap[x.Name] = make([]*model.User, 0)
		}
		itemMap[x.Name] = append(itemMap[x.Name], x)
	}
	return itemMap
}

func (u userRepository) Statuses(in []*model.User) []int64 {
	items := make([]int64, len(in))
	for i, x := range in {
		items[i] = x.Status
	}
	return items
}

func (u userRepository) StatusToUsersMap(in []*model.User) map[int64][]*model.User {
	itemMap := make(map[int64][]*model.User)
	for _, x := range in {
		if _, ok := itemMap[x.Status]; !ok {
			itemMap[x.Status] = make([]*model.User, 0)
		}
		itemMap[x.Status] = append(itemMap[x.Status], x)
	}
	return itemMap
}

type UserGroupRepositoryUtil interface {
	GroupIDs(in []*model.UserGroup) []string
	GroupIDToUserGroupsMap(in []*model.UserGroup) map[string][]*model.UserGroup
	UserIDs(in []*model.UserGroup) []string
	UserIDToUserGroupsMap(in []*model.UserGroup) map[string][]*model.UserGroup
}

func (ug userGroupRepository) GroupIDs(in []*model.UserGroup) []string {
	items := make([]string, len(in))
	for i, x := range in {
		items[i] = x.GroupID
	}
	return items
}

func (ug userGroupRepository) GroupIDToUserGroupsMap(in []*model.UserGroup) map[string][]*model.UserGroup {
	itemMap := make(map[string][]*model.UserGroup)
	for _, x := range in {
		if _, ok := itemMap[x.GroupID]; !ok {
			itemMap[x.GroupID] = make([]*model.UserGroup, 0)
		}
		itemMap[x.GroupID] = append(itemMap[x.GroupID], x)
	}
	return itemMap
}

func (ug userGroupRepository) UserIDs(in []*model.UserGroup) []string {
	items := make([]string, len(in))
	for i, x := range in {
		items[i] = x.UserID
	}
	return items
}

func (ug userGroupRepository) UserIDToUserGroupsMap(in []*model.UserGroup) map[string][]*model.UserGroup {
	itemMap := make(map[string][]*model.UserGroup)
	for _, x := range in {
		if _, ok := itemMap[x.UserID]; !ok {
			itemMap[x.UserID] = make([]*model.UserGroup, 0)
		}
		itemMap[x.UserID] = append(itemMap[x.UserID], x)
	}
	return itemMap
}
